// Code generated by sqlc. DO NOT EDIT.
// source: todo.sql

package db

import (
	"context"
	"database/sql"
)

const createTodo = `-- name: CreateTodo :one
INSERT INTO todos (
    description, is_completed, created_at, updated_at
) VALUES (
    $1, $2, $3, $4
) 
RETURNING id, description, is_completed, owner, created_at, updated_at, deleted_at
`

type CreateTodoParams struct {
	Description string       `json:"description"`
	IsCompleted bool         `json:"is_completed"`
	CreatedAt   sql.NullTime `json:"created_at"`
	UpdatedAt   sql.NullTime `json:"updated_at"`
}

func (q *Queries) CreateTodo(ctx context.Context, arg CreateTodoParams) (Todo, error) {
	row := q.db.QueryRowContext(ctx, createTodo,
		arg.Description,
		arg.IsCompleted,
		arg.CreatedAt,
		arg.UpdatedAt,
	)
	var i Todo
	err := row.Scan(
		&i.ID,
		&i.Description,
		&i.IsCompleted,
		&i.Owner,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return i, err
}

const deleteTodo = `-- name: DeleteTodo :exec
UPDATE todos
set deleted_at = now()
where id = $1
`

func (q *Queries) DeleteTodo(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteTodo, id)
	return err
}

const getTodo = `-- name: GetTodo :many
SELECT id, description, is_completed, owner, created_at, updated_at, deleted_at from todos 
WHERE deleted_at is NULL
LIMIT $1 OFFSET $2
`

type GetTodoParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) GetTodo(ctx context.Context, arg GetTodoParams) ([]Todo, error) {
	rows, err := q.db.QueryContext(ctx, getTodo, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Todo{}
	for rows.Next() {
		var i Todo
		if err := rows.Scan(
			&i.ID,
			&i.Description,
			&i.IsCompleted,
			&i.Owner,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.DeletedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getTodoById = `-- name: GetTodoById :one
SELECT id, description, is_completed, owner, created_at, updated_at, deleted_at from todos 
WHERE id = $1 
AND deleted_at is NULL
LIMIT 1
`

func (q *Queries) GetTodoById(ctx context.Context, id int64) (Todo, error) {
	row := q.db.QueryRowContext(ctx, getTodoById, id)
	var i Todo
	err := row.Scan(
		&i.ID,
		&i.Description,
		&i.IsCompleted,
		&i.Owner,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return i, err
}

const updateTodo = `-- name: UpdateTodo :one
UPDATE todos
SET description = COALESCE($1, description), is_completed = COALESCE($2, is_completed)
WHERE id = $3
RETURNING id, description, is_completed, owner, created_at, updated_at, deleted_at
`

type UpdateTodoParams struct {
	Description string `json:"description"`
	IsCompleted bool   `json:"is_completed"`
	ID          int64  `json:"id"`
}

func (q *Queries) UpdateTodo(ctx context.Context, arg UpdateTodoParams) (Todo, error) {
	row := q.db.QueryRowContext(ctx, updateTodo, arg.Description, arg.IsCompleted, arg.ID)
	var i Todo
	err := row.Scan(
		&i.ID,
		&i.Description,
		&i.IsCompleted,
		&i.Owner,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return i, err
}
